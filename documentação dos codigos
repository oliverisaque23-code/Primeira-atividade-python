"""Class Carro"""
class Carro:
    """Proriedade do carro; cor,marca,modelo"""
    # O método __init__ constrói a classe
    def __init__(self, cor, marca, modelo):
        self.cor = cor 
        self.marca = marca
        self.modelo = modelo 
        self.velocidade_atual = 0  # Inicializa velocidade_atual    
        """Proriedade para acelerar o carro"""
    def acelerar(self, valor):
        #velocidade atual += valor de aceleragem do Carro
        self.velocidade_atual += valor 
        print(f"O carro acelerou para {self.velocidade_atual} km/h")
        
        """Proriedade para frear Carro"""
    def frear(self, valor): 
        #vai ser usado para subtrair o valor da velocidade com o valor de quanto o carro freou
        if self.velocidade_atual - valor >= 0:
            self.velocidade_atual -= valor
        else:
            self.velocidade_atual = 0 
        print(f"O carro freou para {self.velocidade_atual} km/h.")
        
        """Proriedade para imprir as informações do carro"""

    def status(self): 
        print("---Status do Carro---")
        #exibe a marca e as informações do carro de uma por uma 
        print(f"Marca: {self.marca}")
        print(f"Modelo: {self.modelo}")
        print(f"Cor: {self.cor}")
        print(f"Velocidade Atual: {self.velocidade_atual} km/h")
        print("------------------------------")
        
        """Testando e exibindo as informações do carro"""

# Código de execução
meu_carro = Carro("Preto", "Hyundai", "Creta")
 #mostra e puxa o status de como o carro está ou seja, se ele esta freando ou acelarando e a velocidade atual       
meu_carro.status() 

meu_carro.acelerar(50)
meu_carro.acelerar(30)

meu_carro.status()

meu_carro.frear(20)

meu_carro.status()


          

"""Classe conta Bancária"""
class ContaBancaria:
    """Propriedades do titular da conta e o saldo dele"""
    def __init__(self, titular, saldo=0):
        self.__titular = titular
        self.__saldo = saldo
    
    """Fala o valor de deposito que será feito e inserido na Conta"""

    def depositar(self, valor):
        if valor > 0:
            self.__saldo += valor
            print(f"Deposito de R${valor} realizado! Novo Saldo: R${self.__saldo}")

    """Diz o valor refente ao saque e quanto será retirado da conta"""
    def sacar(self, valor):
        if 0 < valor <= self.__saldo:
            self.__saldo -= valor
            print(f"Saque de R${valor} realizado! Novo Saldo: R${self.__saldo}, Saldo atual da conto {self.__titular}: R${self.__saldo}")

    """Exibe o saldo da conta para quem está vendo e lendo"""
    def get_saldo(self):
        print(f"Seu saldo é: R${self.__saldo}")
        
    """Exibição"""
caylon = ContaBancaria("Caylon", 1000)  #Exibição do Saldo atual da conta

caylon.depositar(500)  #Trabalha e realiza a função de deposito da conta 

caylon.sacar(200)  #Trabalha e realiza a função de saque da conta





    """Class  implementação Conta bancaria""" 
class ContaBancaria:
    """Propriedades do titular da conta e o saldo que ele tem"""
    def __init__(self, titular, saldo=0):
        self.__titular = titular
        self.__saldo = saldo
        self.__historico = []
        self.__historico.append(f"Conta criada para {titular} com saldo inicial de R${saldo:.2f}")

    # Método para obter o nome do titular
    """Mostra o titular da conta"""
    def get_titular(self):
        return self.__titular

    # Método para obter o saldo atual
    """""Mostra o saldo da conta"""
    def get_saldo(self):
        return self.__saldo

    # Método para depósito
    """""Função de deposito"""
    def depositar(self, valor):
        if valor > 0:
            self.__saldo += valor
            self.__historico.append(f"Depósito de R${valor:.2f} | Saldo atual: R${self.__saldo:.2f}")
            print(f"Depósito de R${valor:.2f} realizado! Novo saldo: R${self.__saldo:.2f}")
        else:
            print("O valor do depósito deve ser maior que zero.")

    # Método para saque
    """Função de sacar o dinheiro da conta"""
    def sacar(self, valor):
        if valor <= 0:
            print("O valor do saque deve ser maior que zero.")
        elif valor > self.__saldo:
            print("Saldo insuficiente para o saque.")
        else:
            self.__saldo -= valor
            self.__historico.append(f"Saque de R${valor:.2f} | Saldo atual: R${self.__saldo:.2f}")
            print(f"Saque de R${valor:.2f} realizado! Novo saldo: R${self.__saldo:.2f}")

    # Método para transferência
    """Método para transferir dinheiro para outra conta"""
    def transferir(self, valor, conta_destino):
        if valor <= 0:
            print("O valor da transferência deve ser maior que zero.")
        elif valor > self.__saldo:
            print("Saldo insuficiente para a transferência.")
        elif not isinstance(conta_destino, ContaBancaria):
            print("Conta de destino inválida.")
        else:
            self.__saldo -= valor
            conta_destino.__saldo += valor
            self.__historico.append(f"Transferência de R${valor:.2f} para {conta_destino.get_titular()} | Saldo atual: R${self.__saldo:.2f}")
            conta_destino.__historico.append(f"Recebimento de R${valor:.2f} de {self.get_titular()} | Saldo atual: R${conta_destino.get_saldo():.2f}")
            print(f"Transferência de R${valor:.2f} para {conta_destino.get_titular()} realizada com sucesso.")

    # Método para visualizar o extrato
    """Função para ver o extrato da conta"""
    def ver_extrato(self):
        print(f"\nExtrato da conta de {self.__titular}:")
        for transacao in self.__historico:
            print(f"- {transacao}")


# Criando contas
"""Crição de conta"""
conta1 = ContaBancaria("Nicolas", 1000)
conta2 = ContaBancaria("Diogo", 500)

# Operações
"""Operações que a conta faz"""
conta1.depositar(300)
conta1.sacar(200)
conta1.transferir(400, conta2)

# Visualizando extratos
"""Visualizaões do extrato"""
conta1.ver_extrato()
conta2.ver_extrato()

# Acessando dados via métodos
"""Donos das contas"""
print(f"\nTitular da conta 1: {conta1.get_titular()}")



"""Classe que cria uma pesssoa e que leva como atributos o nome e os km andados"""
class Pessoa:
    def __init__(self, nome, km):
        self.nome = nome
        self.km = km
    """Propriedade para andar para frente"""
    def frente(self):
        # Só funciona se os km andados forem maior que 0
        if self.km > 0:
            print(f"O (a) {self.nome} andou: {self.km}km para frente")
        else:
            print(f"O (a) {self.nome} não andou!")

    """Propriedade para andar para tras"""
    def tras(self, km):
        # Só funciona se os km andados forem maior que 0
        if self.km > 0:
            print(f"O (a) {self.nome} andou: {self.km}km para trás")
        else:
            print(f"O (a) {self.nome} não andou!")

    """Propriedade para andar para a direita"""
    def lado_direito(self, km):
        # Só funciona se os km andados forem maior que 0
        if self.km > 0:
            print(f"O (a) {self.nome} andou: {self.km}km para a direita")
        else:
            print(f"O (a) {self.nome} não andou!")

    """Propriedade para andar para a esquerda"""
    def lado_esquerdo(self, km):
        # Só funciona se os km andados forem maior que 0
        if self.km > 0:
            print(f"O (a) {self.nome} andou: {self.km}km para a esquerda")
        else:
            print(f"O (a) {self.nome} não andou!")

"""Exibir o resultado do código"""
caylon = Pessoa("Caylon", 5)
caylon.frente()






"""Classe de Compartilhar ou Curtir como atributo o nome do titulo"""
class CurtirOuCompartilhar:
    def __init__(self, titulo):
        self.titulo = titulo  #Titulo do item a ser compartilhado ou curtido

    """Metodo para Curtir"""
    def curtir(self):
        print(f"O usuário curtiu o vídeo: {self.titulo}.")

    """Método para Compartilhar"""
    def compartilhar(self):
        print(f"O usuário compartilhou o vídeo: {self.titulo}.")

"""Exibir Resultado"""
caylon = CurtirOuCompartilhar("Três gatos brincando")
caylon.compartilhar()





"""Classe livro que recebe os atributos titulo e autor"""
class Livro:
    def __init__(self, titulo, autor):
        self.titulo = titulo
        self.autor = autor

    # Método para ler
    def ler(self):
        print(f"Lendo o livro '{self.titulo}' de {self.autor}.")

"""Exibir resultados"""
kaio = Livro("Senhor dos Anéis", "Desconhecido")
kaio.ler()




"""Classe Computador com atributos marca, ligado/desligado"""
class Computador:
    def __init__(self, marca):
        self.marca = marca
        self.ligado = False

    """Método ligar computador"""
    def ligar(self):
        self.ligado = True
        print(f"O computador {self.marca} está ligado.")

    """Método desligar computador"""
    def desligar(self):
        self.ligado = False
        print(f"O computador {self.marca} está desligado.")


"""Exibir Resultado"""
fe16 = Computador("FE16")
fe16.ligar()
fe16.desligar()


"""Classe onibus com atributos marca, capacidade e andando/parado"""
class Onibus:
    def __init__(self, marca, capacidade):
        self.marca = marca
        self.capacidade = capacidade
        self.andando = False

    """Método para o onibus ir para andar"""
    def andar(self):
        # Andar inicialmente é igual a False, Mudamos para True
        andando = True
        print(f"O ônibus {self.marca}, está andando com {self.capacidade} passageiros.")

    """Método para o onibus parar"""
    def parar(self):
        # Mudar andar para False, caso esteja em True
        andando = False
        print(f"O ônibus {self.marca}, parou e está com {self.capacidade} passageiros.")

"""Exibir resultado"""
wolks = Onibus("Wolksvagen", 26)
wolks.andar()
wolks.parar()



"""Classe Jogo para jogod diversos"""
class Jogo:
    # Nome e Genero dos jogos 
    def __init__(self, nome, genero):
        self.nome = nome
        self.genero = genero

    """Método para iniciar o jogo"""
    def iniciar(self):
        print(f"Iniciando o jogo '{self.nome}' do gênero {self.genero}.")

    """Método desligar o jogo"""
    def desligar(self):
        print(f"Desligando o jogo '{self.nome}' do gênero {self.genero}.")


"""Exibir resultado"""
fifa = Jogo("Fifa", "Futebol/Esportes")
fifa.iniciar()
fifa.desligar()




"""Classe bicicleta"""
class Bicicleta:
    """Método que define a cor e o tipo da bicicleta"""
    def __init__(self, cor, tipo):
        self.cor = cor
        self.tipo = tipo

    """Método para pedalar"""
    def pedalar(self):
        print(f"Pedalando a bicicleta {self.tipo} de cor {self.cor}.")

"""Exibir resultados"""
bike = Bicicleta("branca", "porte grande")
bike.pedalar()



          
